// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

/**
 * Test fixture for automation_util.js.
 * @constructor
 * @extends {ChromeVoxE2ETestBase}
 */
function AutomationUtilE2ETest() {
  ChromeVoxNextE2ETest.call(this);
}

AutomationUtilE2ETest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    window.Dir = AutomationUtil.Dir;
  },

  basicDoc: function() {/*!
    <p><a href='#'></a>hello</p>
    <h1><ul><li>a</ul><button></h1>
  */},

  secondDoc: function() {/*!
    <html>
      <head><title>Second doc</title></head>
      <body><div>Second</div></body>
    </html>
  */},

  iframeDoc: function() {/*!
    <html>
      <head><title>Second doc</title></head>
      <body>
        <iframe src="data:text/html,<p>Inside</p>"></iframe>
      </body>
    </html>
  */}
};

TEST_F('AutomationUtilE2ETest', 'GetAncestors', function() {
  this.runWithLoadedTree(this.basicDoc, function(root) {
    var expectedLength = 1;
    while (root) {
      var ancestors = AutomationUtil.getAncestors(root);
      assertEquals(expectedLength++, ancestors.length);
      root = root.firstChild;
    }
  });
});
  
TEST_F('AutomationUtilE2ETest', 'GetUniqueAncestors', function() {
  this.runWithLoadedTree(this.basicDoc, function(root) {
    var leftmost = root, rightmost = root;
    while (leftmost.firstChild)
      leftmost = leftmost.firstChild;
    while (rightmost.lastChild)
      rightmost = rightmost.lastChild;

    var leftAncestors = AutomationUtil.getAncestors(leftmost);
    var rightAncestors = AutomationUtil.getAncestors(rightmost);
    assertEquals(chrome.automation.RoleType.link, leftmost.role);
    assertEquals(chrome.automation.RoleType.button, rightmost.role);
    assertEquals(
        1, AutomationUtil.getDivergence(leftAncestors, rightAncestors));
    assertEquals(
        -1, AutomationUtil.getDivergence(leftAncestors, leftAncestors));

    var uniqueAncestorsLeft =
        AutomationUtil.getUniqueAncestors(rightmost, leftmost);
    var uniqueAncestorsRight =
        AutomationUtil.getUniqueAncestors(leftmost, rightmost);

    assertEquals(2, uniqueAncestorsLeft.length);
    assertEquals(chrome.automation.RoleType.paragraph,
        uniqueAncestorsLeft[0].role);
    assertEquals(chrome.automation.RoleType.link,
        uniqueAncestorsLeft[1].role);

    assertEquals(3, uniqueAncestorsRight.length);
    assertEquals(chrome.automation.RoleType.heading,
        uniqueAncestorsRight[0].role);
    assertEquals(chrome.automation.RoleType.group,
        uniqueAncestorsRight[1].role);
    assertEquals(chrome.automation.RoleType.button,
        uniqueAncestorsRight[2].role);

    assertEquals(
        1, AutomationUtil.getUniqueAncestors(leftmost, leftmost).length);

  });
});
  
TEST_F('AutomationUtilE2ETest', 'GetDirection', function() {
  this.runWithLoadedTree(this.basicDoc, function(root) {
    var left = root, right = root;

    // Same node.
    assertEquals(Dir.FORWARD, AutomationUtil.getDirection(left, right));

    // Ancestor.
    left = left.firstChild;
    assertEquals(Dir.FORWARD, AutomationUtil.getDirection(left, right));
    assertEquals(Dir.FORWARD, AutomationUtil.getDirection(right, left));

    // Ordered.
    right = right.lastChild;
    assertEquals(Dir.BACKWARD, AutomationUtil.getDirection(right, left));
    assertEquals(Dir.FORWARD, AutomationUtil.getDirection(left, right));
  });
});

TEST_F('AutomationUtilE2ETest', 'IsInSameWebpage', function() {
  this.runWithLoadedTree(this.basicDoc, function(root) {
    this.runWithLoadedTree(this.secondDoc, function(root2) {
      chrome.automation.getDesktop(this.newCallback(function(desktop) {
        assertTrue(AutomationUtil.isInSameWebpage(root, root));
        assertTrue(AutomationUtil.isInSameWebpage(root.firstChild, root));
        assertTrue(AutomationUtil.isInSameWebpage(root, root.firstChild));

        assertTrue(AutomationUtil.isInSameWebpage(root2, root2));
        assertTrue(AutomationUtil.isInSameWebpage(root2.firstChild, root2));
        assertTrue(AutomationUtil.isInSameWebpage(root2, root2.firstChild));

        assertFalse(AutomationUtil.isInSameWebpage(root, root2));
        assertFalse(AutomationUtil.isInSameWebpage(root.firstChild, root2));
        assertFalse(AutomationUtil.isInSameWebpage(root2.firstChild));
        assertFalse(AutomationUtil.isInSameWebpage(
            root.firstChild, root2.firstChild));

        assertFalse(AutomationUtil.isInSameWebpage(root, desktop));
        assertFalse(AutomationUtil.isInSameWebpage(root2, desktop));
      }.bind(this)));
    }.bind(this));
  }.bind(this));
});

TEST_F('AutomationUtilE2ETest', 'IsInSameWebpageIframe', function() {
  // Wait for load complete on both outer frame and iframe.
  var outerFrame;
  var innerFrame;
  var desktop;
  var onSuccess = this.newCallback(function() {
    assertTrue(AutomationUtil.isInSameWebpage(outerFrame, innerFrame));
    assertFalse(AutomationUtil.isInSameWebpage(outerFrame, desktop));
    assertFalse(AutomationUtil.isInSameWebpage(innerFrame, desktop));
    assertFalse(AutomationUtil.isInSameWebpage(outerFrame.parent, innerFrame));
  }.bind(this));

  chrome.automation.getDesktop(function(r) {
    desktop = r;
    this.runWithTab(this.iframeDoc, function(newTabUrl) {
      var listener = function(evt) {
        if (evt.target.docUrl == newTabUrl)
          outerFrame = evt.target;
	if (evt.target.docUrl.indexOf('data:text/html') == 0)
	  innerFrame = evt.target;

        if (outerFrame && innerFrame) {
          desktop.removeEventListener('loadComplete', listener, true);
          onSuccess();
        }
      }.bind(this);
      desktop.addEventListener('loadComplete', listener, true);
    }.bind(this));
  }.bind(this));
});
