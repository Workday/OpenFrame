// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js',
             '../../testing/assert_additions.js']);

GEN_INCLUDE(['../../testing/mock_feedback.js']);

/**
 * Test fixture for Background.
 * @constructor
 * @extends {ChromeVoxNextE2ETest}
 */
function BackgroundTest() {
  ChromeVoxNextE2ETest.call(this);
}

BackgroundTest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    global.backgroundObj.forceChromeVoxNextActive();
    window.RoleType = chrome.automation.RoleType;
  },

  /**
   * @return {!MockFeedback}
   */
  createMockFeedback: function() {
    var mockFeedback = new MockFeedback(this.newCallback(),
                                        this.newCallback.bind(this));
    mockFeedback.install();
    return mockFeedback;
  },

  /**
   * Create a function which perform the command |cmd|.
   * @param {string} cmd
   * @return {function() : void}
   */
  doCmd: function(cmd) {
    return function() {
      global.backgroundObj.onGotCommand(cmd);
    };
  },

  linksAndHeadingsDoc: function() {/*!
    <p>start</p>
    <a href='#a'>alpha</a>
    <a href='#b'>beta</a>
    <p>
      <h1>charlie</h1>
      <a href='foo'>delta</a>
    </p>
    <a href='#bar'>echo</a>
    <h2>foxtraut</h2>
    <p>end<span>of test</span></p>
  */},

  formsDoc: function() {/*!
    <select id="fruitSelect">
      <option>apple</option>
      <option>grape</option>
      <option> banana</option>
    </select>
  */}
};

/** Tests that ChromeVox classic is in this context. */
SYNC_TEST_F('BackgroundTest', 'ClassicNamespaces', function() {
  assertEquals('object', typeof(cvox));
  assertEquals('function', typeof(cvox.ChromeVoxBackground));
});

/** Tests that ChromeVox next is in this context. */
SYNC_TEST_F('BackgroundTest', 'NextNamespaces', function() {
  assertEquals('function', typeof(Background));
});

/** Tests consistency of navigating forward and backward. */
TEST_F('BackgroundTest', 'ForwardBackwardNavigation', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
    var doCmd = this.doCmd.bind(this);

    mockFeedback.expectSpeech('start').expectBraille('start');

    mockFeedback.call(doCmd('nextLink'))
        .expectSpeech('alpha', 'Link')
        .expectBraille('alpha lnk');
    mockFeedback.call(doCmd('nextLink'))
        .expectSpeech('beta', 'Link')
        .expectBraille('beta lnk');
    mockFeedback.call(doCmd('nextLink'))
        .expectSpeech('delta', 'Link')
        .expectBraille('delta lnk');
    mockFeedback.call(doCmd('previousLink'))
        .expectSpeech('beta', 'Link')
        .expectBraille('beta lnk');
    mockFeedback.call(doCmd('nextHeading'))
        .expectSpeech('Heading 1', 'charlie')
        .expectBraille('h1 charlie');
    mockFeedback.call(doCmd('nextHeading'))
        .expectSpeech('Heading 2', 'foxtraut')
        .expectBraille('h2 foxtraut');
    mockFeedback.call(doCmd('previousHeading'))
        .expectSpeech('Heading 1', 'charlie')
        .expectBraille('h1 charlie');

    mockFeedback.call(doCmd('nextElement'))
        .expectSpeech('delta', 'Link')
        .expectBraille('delta lnk');
    mockFeedback.call(doCmd('nextElement'))
        .expectSpeech('echo', 'Link')
        .expectBraille('echo lnk');
    mockFeedback.call(doCmd('nextElement'))
        .expectSpeech('Heading 2', 'foxtraut')
        .expectBraille('h2 foxtraut');
    mockFeedback.call(doCmd('nextElement'))
        .expectSpeech('end')
        .expectBraille('end');
    mockFeedback.call(doCmd('previousElement'))
        .expectSpeech('Heading 2', 'foxtraut')
        .expectBraille('h2 foxtraut');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeech('end', 'of test')
        .expectBraille('end of test');

    mockFeedback.call(doCmd('goToBeginning'))
        .expectSpeech('start')
        .expectBraille('start');
    mockFeedback.call(doCmd('goToEnd'))
        .expectSpeech('of test')
        .expectBraille('of test');

    mockFeedback.replay();
  });
});

TEST_F('BackgroundTest', 'CaretNavigation', function() {
  // TODO(plundblad): Add braille expectaions when crbug.com/523285 is fixed.
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
    var doCmd = this.doCmd.bind(this);

    mockFeedback.expectSpeech('start');
    mockFeedback.call(doCmd('nextCharacter'))
        .expectSpeech('t');
    mockFeedback.call(doCmd('nextCharacter'))
        .expectSpeech('a');
    mockFeedback.call(doCmd('nextWord'))
        .expectSpeech('Link', 'alpha');
    mockFeedback.call(doCmd('nextWord'))
        .expectSpeech('Link', 'beta');
    mockFeedback.call(doCmd('nextWord'))
        .expectSpeech('Heading 1', 'charlie');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeech('Link', 'delta');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeech('Link', 'echo');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeech('Heading 2', 'foxtraut');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeech('end', 'of test');
    mockFeedback.call(doCmd('nextCharacter'))
        .expectSpeech('n');
    mockFeedback.call(doCmd('previousCharacter'))
        .expectSpeech('e');
    mockFeedback.call(doCmd('previousCharacter'))
        .expectSpeech('Heading 2', 't');
    mockFeedback.call(doCmd('previousWord'))
        .expectSpeech('foxtraut');
    mockFeedback.call(doCmd('previousWord'))
        .expectSpeech('Link', 'echo');
    mockFeedback.call(doCmd('previousCharacter'))
        .expectSpeech('Link', 'a');
    mockFeedback.call(doCmd('previousCharacter'))
        .expectSpeech('t');
    mockFeedback.call(doCmd('nextWord'))
        .expectSpeech('Link', 'echo');
    mockFeedback.replay();
  });
});

TEST_F('BackgroundTest', 'SelectSingleBasic', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.formsDoc, function() {
    var sendDownToSelect =
        this.sendKeyToElement.bind(this, undefined, 'Down', '#fruitSelect');
    mockFeedback.expectSpeech('apple', 'Menu item', /1 of 3/)
        .expectBraille('apple mnuitm 1/3')
        .call(sendDownToSelect)
        .expectSpeech('grape', /2 of 3/)
        .expectBraille('grape mnuitm 2/3')
        .call(sendDownToSelect)
        .expectSpeech('banana', /3 of 3/)
        .expectBraille('banana mnuitm 3/3');
    mockFeedback.replay();
  });
});

TEST_F('BackgroundTest', 'ContinuousRead', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
    mockFeedback.expectSpeech('start')
        .call(this.doCmd('continuousRead'))
        .expectSpeech(
            'start',
            'alpha', 'Link',
            'beta', 'Link',
            'Heading 1', 'charlie');
    mockFeedback.replay();
  });
});

TEST_F('BackgroundTest', 'InitialFocus', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree('<a href="a">a</a>',
    function(rootNode) {
      mockFeedback.expectSpeech('a')
          .expectSpeech('Link');
      mockFeedback.replay();
    });
});

TEST_F('BackgroundTest', 'AriaLabel', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree('<a aria-label="foo" href="a">a</a>',
    function(rootNode) {
      rootNode.find({role: 'link'}).focus();
      mockFeedback.expectSpeech('foo')
          .expectSpeech('Link')
          .expectBraille('foo lnk');
      mockFeedback.replay();
    }
  );
});

TEST_F('BackgroundTest', 'ShowContextMenu', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree('<a href="a">a</a>',
    function(rootNode) {
      mockFeedback.expectSpeech(/menu opened/)
          .call(function() {
            // When shown, the context menu pushes a new message loop so test
            // messages sent to the browser do not get processed. Ensure we
            // exit the context menu here.
            go.showContextMenu();
          });
      mockFeedback.replay();

      var go = rootNode.find({ role: RoleType.link });
      this.listenOnce(go, 'focus', function(e) {
        this.doCmd('showContextMenu')();
      }.bind(this), true);
      go.focus();
    }.bind(this));
});

TEST_F('BackgroundTest', 'BrailleRouting', function() {
  var mockFeedback = this.createMockFeedback();
  var route = function(position) {
    assertTrue(global.backgroundObj.onBrailleKeyEvent(
        {command: cvox.BrailleKeyCommand.ROUTING,
         displayPosition: position},
        mockFeedback.lastMatchedBraille));
  };
  this.runWithLoadedTree(
      function() {/*!
        <p>start</p>
        <button id="btn1">Click me</button>
        <p>Some text</p>
        <button id="btn2">Focus me</button>
        <p>Some more text</p>
        <input type="text" id ="text" value="Edit me">
        <script>
          document.getElementById('btn1').addEventListener('click', function() {
            document.getElementById('btn2').focus();
          }, false);
        </script>
      */},
      function(rootNode) {
        var button1 = rootNode.find({role: RoleType.button,
                                     name: 'Click me'});
        var textField = rootNode.find(
            {role: RoleType.textField});
        mockFeedback.expectBraille('start')
            .call(button1.focus.bind(button1))
            .expectBraille(/^Click me btn/)
            .call(route.bind(null, 5))
            .expectBraille(/Focus me btn/)
            .call(textField.focus.bind(textField))
            .expectBraille('Edit me ed', {startIndex: 0})
            .call(route.bind(null, 3))
            .expectBraille('Edit me ed', {startIndex: 3})
            .call(function() {
              assertEquals(3, textField.textSelStart);
            });
        mockFeedback.replay();
      });
});

TEST_F('BackgroundTest', 'FocusInputElement', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(
    function() {/*!
      <input id="name" value="Lancelot">
      <input id="quest" value="Grail">
      <input id="color" value="Blue">
    */},
    function(rootNode) {
      var name = rootNode.find({ attributes: { value: 'Lancelot' } });
      var quest = rootNode.find({ attributes: { value: 'Grail' } });
      var color = rootNode.find({ attributes: { value: 'Blue' } });

      mockFeedback.call(quest.focus.bind(quest))
          .expectSpeech('Grail', 'Edit text')
          .call(color.focus.bind(color))
          .expectSpeech('Blue', 'Edit text')
          .call(name.focus.bind(name))
          .expectNextSpeechUtteranceIsNot('Blue')
          .expectSpeech('Lancelot', 'Edit text');
      mockFeedback.replay();
    }.bind(this));
});

TEST_F('BackgroundTest', 'UseEditableState', function() {
  this.runWithLoadedTree(
    function() {/*!
      <input type="text"></input>
      <p tabindex=0>hi</p>
    */},
    function(rootNode) {
      var assertExists = this.newCallback(function (evt) {
        assertNotNullNorUndefined(
            global.desktopAutomationHandler.editableTextHandler_);
        evt.stopPropagation();
      });
      var assertDoesntExist = this.newCallback(function (evt) {
        assertTrue(!global.desktopAutomationHandler.editableTextHandler_);
        evt.stopPropagation();
      });

      var editable = rootNode.find({ role: RoleType.textField });
      var nonEditable = rootNode.find({ role: RoleType.paragraph });

      this.listenOnce(editable, 'focus', assertExists);
      this.listenOnce(nonEditable, 'focus', assertDoesntExist);

      editable.focus();
      nonEditable.focus();
    }.bind(this));
});

TEST_F('BackgroundTest', 'EarconsForControls', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(
    function() {/*!
      <p>Initial focus will be on something that's not a control.</p>
      <a href="#">MyLink</a>
      <button>MyButton</button>
      <input type=checkbox>
      <input type=checkbox checked>
      <input>
      <select multiple><option>1</option></select>
      <select><option>2</option></select>
      <input type=range value=5>
    */},
    function(rootNode) {
      var doCmd = this.doCmd.bind(this);

      mockFeedback.call(doCmd('nextElement'))
          .expectSpeech('MyLink')
          .expectEarcon(cvox.Earcon.LINK)
          .call(doCmd('nextElement'))
          .expectSpeech('MyButton')
          .expectEarcon(cvox.Earcon.BUTTON)
          .call(doCmd('nextElement'))
          .expectSpeech('Check box')
          .expectEarcon(cvox.Earcon.CHECK_OFF)
          .call(doCmd('nextElement'))
          .expectSpeech('Check box')
          .expectEarcon(cvox.Earcon.CHECK_ON)
          .call(doCmd('nextElement'))
          .expectSpeech('Edit text')
          .expectEarcon(cvox.Earcon.EDITABLE_TEXT)
          .call(doCmd('nextElement'))
          .expectSpeech('List box')
          .expectEarcon(cvox.Earcon.LISTBOX)
          .call(doCmd('nextElement'))
          .expectSpeech('Button', 'has pop up')
          .expectEarcon(cvox.Earcon.POP_UP_BUTTON)
          .call(doCmd('nextElement'))
          .expectSpeech(/slider/)
          .expectEarcon(cvox.Earcon.SLIDER);

      mockFeedback.replay();
    }.bind(this));
});

TEST_F('BackgroundTest', 'ToggleChromeVoxVersion', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.linksAndHeadingsDoc, function() {
    var gotCmd = global.backgroundObj.onGotCommand;

    // The command came from the background keyboard handler.
    var togglerFromBackground = gotCmd.bind(gotCmd, 'toggleChromeVoxVersion');

    // The command came from a content script.
    var togglerFromContent = gotCmd.bind(gotCmd, 'toggleChromeVoxVersion',
                                         true);

    mockFeedback.call(togglerFromBackground)
        .expectSpeech('classic')   
        .call(togglerFromContent)
        .expectSpeech('next')
        .call(togglerFromBackground)
        .expectSpeech('classic');
    mockFeedback.replay();
  });
});

SYNC_TEST_F('BackgroundTest', 'GlobsToRegExp', function() {
  assertEquals('/^()$/', Background.globsToRegExp_([]).toString());
  assertEquals(
      '/^(http:\\/\\/host\\/path\\+here)$/',
      Background.globsToRegExp_(['http://host/path+here']).toString());
  assertEquals(
      '/^(url1.*|u.l2|.*url3)$/',
      Background.globsToRegExp_(['url1*', 'u?l2', '*url3']).toString());
});

TEST_F('BackgroundTest', 'ActiveOrInactive', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(function() {/*!
      <a href="a">a</a>
      <button>b</button>
      <input type="text"></input>
    */},
    function(rootNode) {
      var focusButton = function() { rootNode.find({role: 'button'}).focus(); };
      var on = function() { cvox.ChromeVox.isActive = true; };
      var off = function() { cvox.ChromeVox.isActive = false; };

      function focusThen(toFocus, then) {
        toFocus.addEventListener('focus', function innerFocus(e) {
          if (e.target != toFocus)
            return;
          rootNode.removeEventListener('focus', innerFocus, true);
          then && then();
        }, true);
        toFocus.focus();
      }

      mockFeedback.call(focusButton)
          .expectSpeech('b').expectSpeech('Button')
          .call(off)
          .call(focusThen.bind(this, rootNode.find({ role: 'link' }), on))
          .call(focusThen.bind(this, rootNode.find({ role: 'textField' })))
          .expectNextSpeechUtteranceIsNot('a')
          .expectSpeech('Edit text');

      mockFeedback.replay();
    }
  );
});
