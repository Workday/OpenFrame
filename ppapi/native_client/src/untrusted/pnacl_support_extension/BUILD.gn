# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")

if (enable_nacl && enable_nacl_untrusted && enable_pnacl) {
  # This target copies files from the prebuilt/DEPS'ed in pnacl_translator
  # toolchain and copies the latest PNaCl IRT shim library.
  # We could use 'copies', but we want to rename the files in a white-listed
  # way first.  Thus use an action.
  action("pnacl_support_extension") {
    script = "pnacl_component_crx_gen.py"
    inputs = [
      "//native_client/build/package_version/package_version.py",
      "//native_client/pnacl/driver/pnacl_info_template.json",
      "//native_client/toolchain_revisions/pnacl_translator.json",
    ]
    shim_target_label =
        "//ppapi/native_client/src/untrusted/pnacl_irt_shim:browser"
    src_shim_name = "libpnacl_irt_shim_browser.a"
    desired_shim_name = "libpnacl_irt_shim.a"

    # Use the IRT toolchain to build the shim. We want similar properties
    # (x86-64 sandbox base address hiding). One thing we don't want is the
    # IRT's secondary TLS, but that is handled by tls_edit and not compiler
    # flags (so IRT compiler flags should be fine).
    shim_toolchain_base = "//build/toolchain/nacl:irt_"

    shim_target_tc_label = "$shim_target_label($shim_toolchain_base$target_cpu)"
    deps = [
      shim_target_tc_label,
    ]
    shim_lib_path =
        rebase_path(get_label_info(shim_target_tc_label, "target_out_dir") +
                        "/$src_shim_name",
                    root_build_dir)
    shim_override_args = [
      "--lib_override",
      "$target_cpu,$shim_lib_path,$desired_shim_name",
    ]

    output_prefix = "$root_out_dir/pnacl/pnacl_public_"
    outputs = [
      "${output_prefix}pnacl_json",
    ]

    # Files that will be copied from the toolchain to output.
    outputs_from_toolchain = [
      "crtbegin_o",
      "crtend_o",
      "ld_nexe",
      "libcrt_platform_a",
      "libgcc_a",
      "libpnacl_irt_shim_a",
      "pnacl_llc_nexe",
    ]
    if (target_cpu == "arm") {
      foreach(output_elem, outputs_from_toolchain) {
        outputs += [ output_prefix + "arm_" + output_elem ]
      }
    } else if (target_cpu == "mipsel") {
      foreach(output_elem, outputs_from_toolchain) {
        outputs += [ output_prefix + "mips32_" + output_elem ]
      }
    } else if (target_cpu == "x86") {
      foreach(output_elem, outputs_from_toolchain) {
        outputs += [ output_prefix + "x86_32_" + output_elem ]
      }

      # On Windows, for offline testing (i.e., without component updater
      # selecting the platform-specific files with multi-CRXes), we need
      # to stage both x86-32 and x86-64 (because 32-bit chrome on 64-bit
      # windows will need 64-bit nexes).
      if (is_win) {
        foreach(output_elem, outputs_from_toolchain) {
          outputs += [ output_prefix + "x86_64_" + output_elem ]
        }
        shim_target_tc_x64_label =
            "$shim_target_label(${shim_toolchain_base}x64)"
        deps += [ shim_target_tc_x64_label ]
        shim_lib_x64_path =
            rebase_path(get_label_info(shim_target_tc_x64_label,
                                       "target_out_dir") + "/$src_shim_name",
                        root_build_dir)
        shim_override_args = [
          "--lib_override",
          "x64,$shim_lib_x64_path,$desired_shim_name",
        ]
      }
    } else if (target_cpu == "x64") {
      foreach(output_elem, outputs_from_toolchain) {
        outputs += [ output_prefix + "x86_64_" + output_elem ]
      }
    } else {
      assert(false, "unhandled target_cpu")
    }
    args = [
      "--dest",
      rebase_path("$root_out_dir/pnacl", root_build_dir),
    ]
    args += shim_override_args

    if (current_os == "chromeos") {
      toolchain_os = "linux"
    } else {
      toolchain_os = current_os
    }

    args += [
      "--target_arch",
      target_cpu,
      "--info_template_path",
      rebase_path("//native_client/pnacl/driver/pnacl_info_template.json",
                  root_build_dir),
      "--pnacl_translator_path",
      rebase_path(
          "//native_client/toolchain/${toolchain_os}_x86/pnacl_translator",
          root_build_dir),
      "--package_version_path",
      rebase_path("//native_client/build/package_version/package_version.py",
                  root_build_dir),
      "--pnacl_package_name",
      "pnacl_translator",

      # ABI Version Number
      "1",
    ]
  }
}
