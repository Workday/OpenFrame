This is a testharness.js-based test.
PASS the registerProtocolHandler method should exist on the navigator object 
PASS a handler with valid arguments should work 
PASS a relative URL should work 
PASS a URL with a fragment identifier should work 
PASS a URL with a query string should work 
PASS a URL with a multi-argument query string should work 
PASS a URL with the passed string as a directory name should work 
PASS a URL with the passed string as a directory name followed by a query string and fragment identifier should work 
PASS a URL with the passed string included twice should work 
PASS an empty url argument should throw SYNTAX_ERR 
PASS %s instead of domain name should throw SYNTAX_ERR 
PASS %s instead of subdomain name should throw SYNTAX_ERR 
PASS a url argument without %s should throw SYNTAX_ERR 
PASS a url argument pointing to a different domain name, without %s should throw SYNTAX_ERR 
PASS a url argument without %s (but with %) should throw SYNTAX_ERR 
PASS a url argument without %s (but with %a) should throw SYNTAX_ERR 
FAIL a url argument pointing to a different domain name should throw SECURITY_ERR assert_throws: function "function () { navigator.registerProtocolHandler('mailto',..." did not throw
FAIL a url argument pointing to a different domain name should throw SECURITY_ERR (2) assert_throws: function "function () { navigator.registerProtocolHandler('mailto',..." did not throw
FAIL a url argument pointing to a different domain name should throw SECURITY_ERR (3) assert_throws: function "function () { navigator.registerProtocolHandler('mailto',..." did not throw
FAIL looping handlers should throw SECURITY_ERR assert_throws: function "function () { navigator.registerProtocolHandler('mailto',..." did not throw
FAIL a url argument pointing to a non-http[s] scheme should throw SECURITY_ERR due to not being of the same origin assert_throws: function "function () { navigator.registerProtocolHandler('sms', 't..." did not throw
PASS a protocol argument containing an unrecognized scheme should throw SECURITY_ERR 
PASS a protocol argument containing : should throw SYNTAX_ERR 
PASS a protocol argument containing :// should throw SYNTAX_ERR 
PASS a protocol argument containing http:// should throw SYNTAX_ERR 
PASS a protocol argument containing a null character should throw SYNTAX_ERR 
PASS a protocol argument containing a backspace character should throw SYNTAX_ERR 
PASS a protocol argument containing a LF character should throw SYNTAX_ERR 
PASS a protocol argument containing non-alphanumeric characters (like a cyrillic “а”) should throw SYNTAX_ERR 
PASS a protocol argument of “TEL” should be equivalent to “tel” 
PASS a protocol argument of “teL” should be equivalent to “tel” 
PASS attempting to override the about protocol should throw SECURITY_ERR 
PASS attempting to override the attachment protocol should throw SECURITY_ERR 
PASS attempting to override the blob protocol should throw SECURITY_ERR 
PASS attempting to override the chrome protocol should throw SECURITY_ERR 
PASS attempting to override the cid protocol should throw SECURITY_ERR 
PASS attempting to override the data protocol should throw SECURITY_ERR 
PASS attempting to override the file protocol should throw SECURITY_ERR 
PASS attempting to override the ftp protocol should throw SECURITY_ERR 
PASS attempting to override the http protocol should throw SECURITY_ERR 
PASS attempting to override the https protocol should throw SECURITY_ERR 
PASS attempting to override the javascript protocol should throw SECURITY_ERR 
PASS attempting to override the livescript protocol should throw SECURITY_ERR 
PASS attempting to override the mid protocol should throw SECURITY_ERR 
PASS attempting to override the mocha protocol should throw SECURITY_ERR 
PASS attempting to override the opera protocol should throw SECURITY_ERR 
PASS attempting to override the operamail protocol should throw SECURITY_ERR 
PASS attempting to override the res protocol should throw SECURITY_ERR 
PASS attempting to override the resource protocol should throw SECURITY_ERR 
PASS attempting to override the shttp protocol should throw SECURITY_ERR 
PASS attempting to override the tcl protocol should throw SECURITY_ERR 
PASS attempting to override the vbscript protocol should throw SECURITY_ERR 
PASS attempting to override the view-source protocol should throw SECURITY_ERR 
PASS attempting to override the ws protocol should throw SECURITY_ERR 
PASS attempting to override the wss protocol should throw SECURITY_ERR 
PASS attempting to override the wyciwyg protocol should throw SECURITY_ERR 
PASS overriding the geo protocol should work 
PASS overriding the im protocol should work 
PASS overriding the irc protocol should work 
PASS overriding the ircs protocol should work 
PASS overriding the mailto protocol should work 
PASS overriding the mms protocol should work 
PASS overriding the news protocol should work 
PASS overriding the nntp protocol should work 
PASS overriding the sms protocol should work 
PASS overriding the smsto protocol should work 
PASS overriding the tel protocol should work 
PASS overriding the urn protocol should work 
PASS overriding the webcal protocol should work 
PASS overriding the wtai protocol should work 
PASS overriding the xmpp protocol should work 
Harness: the test ran to completion.

