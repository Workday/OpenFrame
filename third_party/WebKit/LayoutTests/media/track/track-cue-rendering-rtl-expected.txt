Test that directionality is set correctly on cues.

** RTL cues alternate with LTR cues **
EVENT(canplaythrough)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '0.25') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == 'ÿ™ÿ¨ÿ±ÿ®ÿ©') OK
EXPECTED (testCueDisplayBox.innerText == 'ÿ™ÿ¨ÿ±ÿ®ÿ©') OK

** The position should be default and CSS direction set to rtl **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'rtl') OK

RUN(video.currentTime = 0.75)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '0.75') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == '	1234') OK
EXPECTED (testCueDisplayBox.innerText == '	1234') OK

** The position should be default and CSS direction set to ltr **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'ltr') OK

RUN(video.currentTime = 1.25)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '1.25') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == 'ÿ™ÿ¨ÿ±ÿ®ÿ© LTR new line, but cue should be RTL') OK
EXPECTED (testCueDisplayBox.innerText == 'ÿ™ÿ¨ÿ±ÿ®ÿ© LTR new line, but cue should be RTL') OK

** The position should be default and CSS direction set to rtl **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'rtl') OK

RUN(video.currentTime = 1.75)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '1.75') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == 'LTR cue ÿ™ÿ¨ÿ±ÿ®ÿ©') OK
EXPECTED (testCueDisplayBox.innerText == 'LTR cue ÿ™ÿ¨ÿ±ÿ®ÿ©') OK

** The position should be default and CSS direction set to ltr **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'ltr') OK

RUN(video.currentTime = 2.25)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '2.25') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == ';1234ÿ™ÿ¨ÿ±ÿ®ÿ©') OK
EXPECTED (testCueDisplayBox.innerText == ';1234ÿ™ÿ¨ÿ±ÿ®ÿ©') OK

** The position should be default and CSS direction set to rtl **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'rtl') OK

RUN(video.currentTime = 2.75)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '2.75') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == '	‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø ') OK
EXPECTED (testCueDisplayBox.innerText == '	‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø ') OK

** The position should be default and CSS direction set to ltr **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'ltr') OK

RUN(video.currentTime = 3.25)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '3.25') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == 'ê°ò (Imperial Aramaic number one, U+10858) strong RTL, non-BMP') OK
EXPECTED (testCueDisplayBox.innerText == 'ê°ò (Imperial Aramaic number one, U+10858) strong RTL, non-BMP') OK

** The position should be default and CSS direction set to rtl **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'rtl') OK

RUN(video.currentTime = 3.75)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '3.75') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == 'ùÖü (Musical symbol quarter note, U+1D15F) strong LTR, non-BMP') OK
EXPECTED (testCueDisplayBox.innerText == 'ùÖü (Musical symbol quarter note, U+1D15F) strong LTR, non-BMP') OK

** The position should be default and CSS direction set to ltr **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'ltr') OK

RUN(video.currentTime = 4.25)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '4.25') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == 'ùÖüÿ™ÿ¨ÿ±ÿ®ÿ©') OK
EXPECTED (testCueDisplayBox.innerText == 'ùÖüÿ™ÿ¨ÿ±ÿ®ÿ©') OK

** The position should be default and CSS direction set to rtl **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'rtl') OK

RUN(video.currentTime = 4.75)
EVENT(seeked)

** Jump to next cue **
EXPECTED (video.currentTime == '4.75') OK
EXPECTED (testTrack.track.activeCues.length == '1') OK
EXPECTED (testTrack.track.activeCues[0].text == '1234ÿ™ÿ¨ÿ±ÿ®ÿ©') OK
EXPECTED (testCueDisplayBox.innerText == '1234ÿ™ÿ¨ÿ±ÿ®ÿ©') OK

** The position should be default and CSS direction set to ltr **
EXPECTED (2 * testCueDisplayBox.offsetLeft == video.videoWidth - testCueDisplayBox.offsetWidth == 'true') OK
EXPECTED (getComputedStyle(testCueDisplayBox).direction == 'ltr') OK
END OF TEST

