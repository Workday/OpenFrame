This is a testharness.js-based test.
PASS Blob interface object 
PASS no-argument Blob constructor 
PASS no-argument Blob constructor without 'new' 
PASS no-argument Blob constructor without brackets 
PASS Passing non-objects, Dates and RegExps for blobParts should throw a TypeError. 
FAIL A plain object should be treated as a sequence for the blobParts argument. Failed to construct 'Blob': The 1st argument is neither an array, nor does it have indexed properties.
PASS A plain object with a length property should be treated as a sequence for the blobParts argument. 
PASS A String object should be treated as a sequence for the blobParts argument. 
PASS A Uint8Array object should be treated as a sequence for the blobParts argument. 
PASS The length getter should be invoked and any exceptions should be propagated. 
FAIL A platform object that supports indexed properties should be treated as a sequence for the blobParts argument (overwritten 'length'.) undefined
PASS ToUint32 should be applied to the length and any exceptions should be propagated. 
PASS Getters and value conversions should happen in order until an exception is thrown. 
PASS ToString should be called on elements of the blobParts array and any exceptions should be propagated. 
PASS Changes to the blobParts array should be reflected in the returned Blob (pop). 
PASS Changes to the blobParts array should be reflected in the returned Blob (unshift). 
PASS ToString should be called on elements of the blobParts array. 
PASS ArrayBuffer elements of the blobParts array should be supported. 
PASS Passing typed arrays as elements of the blobParts array should work. 
PASS Passing a Float64Array as element of the blobParts array should work. 
FAIL Passing an element as the blobParts array should work. Failed to construct 'Blob': The 1st argument is neither an array, nor does it have indexed properties.
PASS Passing an platform object that supports indexed properties as the blobParts array should work (window). 
PASS Passing an platform object that supports indexed properties as the blobParts array should work (window with custom toString). 
PASS Passing an platform object that supports indexed properties as the blobParts array should work (select). 
PASS Passing a platform array object as the blobParts array should work (MessagePort[]). 
PASS Passing a platform array object as the blobParts array should work (Attr[]). 
PASS Array with two blobs 
PASS Array with two buffers 
PASS Array with two bufferviews 
PASS Array with mixed types 
FAIL The 'endings' property should be ignored. Failed to construct 'Blob': The provided value 'invalidEnumValue' is not a valid enum value of type NormalizeLineEndings.
PASS options properties should be accessed in lexicographic order. 
PASS Arguments should be evaluated from left to right. 
PASS Passing null (index 0) for options should use the defaults. 
PASS Passing null (index 0) for options should use the defaults (with newlines). 
PASS Passing undefined (index 1) for options should use the defaults. 
PASS Passing undefined (index 1) for options should use the defaults (with newlines). 
PASS Passing object "[object Object]" (index 2) for options should use the defaults. 
PASS Passing object "[object Object]" (index 2) for options should use the defaults (with newlines). 
PASS Passing object "[object Object]" (index 3) for options should use the defaults. 
PASS Passing object "[object Object]" (index 3) for options should use the defaults (with newlines). 
PASS Passing object "/regex/" (index 4) for options should use the defaults. 
PASS Passing object "/regex/" (index 4) for options should use the defaults (with newlines). 
PASS Passing function "function () {}" (index 5) for options should use the defaults. 
PASS Passing function "function () {}" (index 5) for options should use the defaults (with newlines). 
PASS Newlines should not change when endings is 'transparent'. 
FAIL Newlines should not change when endings is 'native'. assert_equals: expected 9 but got 13
PASS Blob with type "" 
PASS Blob with type "a" 
PASS Blob with type "A" 
PASS Blob with type "text/html" 
PASS Blob with type "TEXT/HTML" 
FAIL Blob with type "√•" Failed to construct 'Blob': The 'type' property must consist of ASCII characters.
FAIL Blob with type "êëæ" Failed to construct 'Blob': The 'type' property must consist of ASCII characters.
PASS Blob with type " image/gif " 
PASS Blob with type "\timage/gif\t" 
PASS Blob with type "image/gif;" 
FAIL Blob with type "ƒ∞mage/gif" Failed to construct 'Blob': The 'type' property must consist of ASCII characters.
FAIL Blob with type "ƒ±mage/gif" Failed to construct 'Blob': The 'type' property must consist of ASCII characters.
PASS Blob with type "image/gif\0" 
PASS Blob with type "unknown/unknown" 
PASS Blob with type "text/plain" 
PASS Blob with type "image/png" 
Harness: the test ran to completion.

